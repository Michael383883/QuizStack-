module Web.View.PuzzleResolution.PuzzleViewer where
import Web.View.Prelude

renderPuzzleViewer = [hsx|
<link rel="stylesheet" href="/css/puzzle-viewer.css" />
    <div class="puzzle-container">
        <div class="puzzle-header">
            <h2 class="puzzle-title">Navegaci√≥n Algor√≠tmica - Sudam√©rica</h2>
            <div class="piece-info">
                <div class="current-piece-info">
                    <span id="currentPieceLabel">Bolivia - Pieza Faltante</span>
                    <div class="piece-stats">
                        <span>Pos: <span id="piecePosition">(0,0)</span></span>
                        <span>Dir: <span id="pieceDirection">Norte</span></span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="puzzle-main">
            <!-- √Årea del mapa puzzle -->
            <div class="puzzle-map">
                <div class="map-title">
                    <h3>Mapa de Sudam√©rica - Encuentra el lugar de Bolivia</h3>
                </div>
                <div class="map-grid" id="mapGrid">
                    <!-- El grid se genera din√°micamente con pa√≠ses -->
                </div>
                
                <!-- Pieza Bolivia que navega -->
                <div class="navigating-piece" id="navigatingPiece">
                    <div class="piece-body bolivia-piece">
                        <span class="piece-label">BOL</span>
                        <div class="piece-direction-indicator"></div>
                    </div>
                </div>
            </div>
            
            <!-- Panel de informaci√≥n del mapa -->
            <div class="map-info-panel">
                <div class="map-legend">
                    <h4>Leyenda del Mapa</h4>
                    <div class="legend-items">
                        <div class="legend-item">
                            <div class="legend-color start"></div>
                            <span>Inicio (S)</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color goal bolivia-target"></div>
                            <span>Lugar de Bolivia (META)</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color country"></div>
                            <span>Otros Pa√≠ses</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color ocean"></div>
                            <span>Oc√©ano (Obst√°culo)</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color mountain"></div>
                            <span>Monta√±as</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color path"></div>
                            <span>Frontera Libre</span>
                        </div>
                    </div>
                </div>
                
                <div class="countries-info">
                    <h4>Pa√≠ses en el Mapa</h4>
                    <div class="countries-list">
                        <div class="country-item">üáµüá™ Per√∫</div>
                        <div class="country-item">üáßüá∑ Brasil</div>
                        <div class="country-item">üá¶üá∑ Argentina</div>
                        <div class="country-item">üá®üá± Chile</div>
                        <div class="country-item">üáµüáæ Paraguay</div>
                        <div class="country-item bolivia-missing">üáßüá¥ Bolivia (FALTANTE)</div>
                    </div>
                </div>
                
                <div class="execution-status">
                    <h4>Estado de Ejecuci√≥n</h4>
                    <div class="status-info">
                        <div class="status-item">
                            <span>Instrucci√≥n actual:</span>
                            <span id="currentInstruction">Ninguna</span>
                        </div>
                        <div class="status-item">
                            <span>Paso:</span>
                            <span id="executionStep">0/0</span>
                        </div>
                        <div class="status-item">
                            <span>Estado:</span>
                            <span id="executionStatus">Listo</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üó∫Ô∏è PuzzleViewer iniciando...');
            
            // Configuraci√≥n del mapa de Sudam√©rica
            const MAP_CONFIG = {
                width: 10,
                height: 8,
                cellSize: 60,
                startPos: {x: 0, y: 0}, // Esquina superior izquierda
                goalPos: {x: 4, y: 4}, // Posici√≥n central donde va Bolivia
                countries: [
                    // Brasil (grande en la derecha)
                    {x: 6, y: 1, name: 'Brasil', code: 'BRA', color: '#4CAF50'},
                    {x: 7, y: 1, name: 'Brasil', code: 'BRA', color: '#4CAF50'},
                    {x: 8, y: 1, name: 'Brasil', code: 'BRA', color: '#4CAF50'},
                    {x: 6, y: 2, name: 'Brasil', code: 'BRA', color: '#4CAF50'},
                    {x: 7, y: 2, name: 'Brasil', code: 'BRA', color: '#4CAF50'},
                    {x: 8, y: 2, name: 'Brasil', code: 'BRA', color: '#4CAF50'},
                    {x: 5, y: 3, name: 'Brasil', code: 'BRA', color: '#4CAF50'},
                    {x: 6, y: 3, name: 'Brasil', code: 'BRA', color: '#4CAF50'},
                    {x: 7, y: 3, name: 'Brasil', code: 'BRA', color: '#4CAF50'},
                    
                    // Per√∫ (izquierda)
                    {x: 1, y: 3, name: 'Per√∫', code: 'PER', color: '#FF9800'},
                    {x: 2, y: 3, name: 'Per√∫', code: 'PER', color: '#FF9800'},
                    {x: 1, y: 4, name: 'Per√∫', code: 'PER', color: '#FF9800'},
                    {x: 2, y: 4, name: 'Per√∫', code: 'PER', color: '#FF9800'},
                    
                    // Chile (izquierda abajo)
                    {x: 1, y: 5, name: 'Chile', code: 'CHI', color: '#F44336'},
                    {x: 1, y: 6, name: 'Chile', code: 'CHI', color: '#F44336'},
                    {x: 2, y: 6, name: 'Chile', code: 'CHI', color: '#F44336'},
                    
                    // Argentina (abajo centro)
                    {x: 3, y: 5, name: 'Argentina', code: 'ARG', color: '#2196F3'},
                    {x: 4, y: 5, name: 'Argentina', code: 'ARG', color: '#2196F3'},
                    {x: 3, y: 6, name: 'Argentina', code: 'ARG', color: '#2196F3'},
                    {x: 4, y: 6, name: 'Argentina', code: 'ARG', color: '#2196F3'},
                    {x: 4, y: 7, name: 'Argentina', code: 'ARG', color: '#2196F3'},
                    
                    // Paraguay (peque√±o)
                    {x: 5, y: 4, name: 'Paraguay', code: 'PAR', color: '#9C27B0'},
                    {x: 5, y: 5, name: 'Paraguay', code: 'PAR', color: '#9C27B0'}
                ],
                oceans: [
                    // Oc√©ano Pac√≠fico (izquierda)
                    {x: 0, y: 1}, {x: 0, y: 2}, {x: 0, y: 3}, {x: 0, y: 4}, {x: 0, y: 5}, {x: 0, y: 6}, {x: 0, y: 7},
                    // Oc√©ano Atl√°ntico (derecha)
                    {x: 9, y: 0}, {x: 9, y: 1}, {x: 9, y: 2}, {x: 9, y: 3}, {x: 9, y: 4}, {x: 9, y: 5}, {x: 9, y: 6}, {x: 9, y: 7}
                ],
                mountains: [
                    // Cordillera de los Andes
                    {x: 2, y: 1}, {x: 3, y: 1}, {x: 2, y: 2}, {x: 3, y: 2}
                ]
            };
            
            // Estado del agente (pieza Bolivia)
            let agent = {
                x: MAP_CONFIG.startPos.x,
                y: MAP_CONFIG.startPos.y,
                direction: 0, // 0=Norte, 1=Este, 2=Sur, 3=Oeste
                isAtGoal: false,
                isMoving: false
            };
            
            // Estado de ejecuci√≥n
            let execution = {
                commands: [],
                currentIndex: 0,
                isRunning: false,
                isPaused: false,
                speed: 1000, // ms entre comandos
                intervalId: null
            };
            
            // Elementos DOM
            const mapGrid = document.getElementById('mapGrid');
            const navigatingPiece = document.getElementById('navigatingPiece');
            const positionDisplay = document.getElementById('piecePosition');
            const directionDisplay = document.getElementById('pieceDirection');
            const currentInstructionDisplay = document.getElementById('currentInstruction');
            const executionStepDisplay = document.getElementById('executionStep');
            const executionStatusDisplay = document.getElementById('executionStatus');
            
            // Inicializar mapa
            function initializeMap() {
                mapGrid.innerHTML = '';
                mapGrid.style.gridTemplateColumns = `repeat(${MAP_CONFIG.width}, ${MAP_CONFIG.cellSize}px)`;
                mapGrid.style.gridTemplateRows = `repeat(${MAP_CONFIG.height}, ${MAP_CONFIG.cellSize}px)`;
                
                // Asegurar que el contenedor del mapa tiene posici√≥n relativa
                document.querySelector('.puzzle-map').style.position = 'relative';
                
                for (let y = 0; y < MAP_CONFIG.height; y++) {
                    for (let x = 0; x < MAP_CONFIG.width; x++) {
                        const cell = document.createElement('div');
                        cell.className = 'map-cell';
                        cell.dataset.x = x;
                        cell.dataset.y = y;
                        
                        // Determinar tipo de celda
                        if (x === MAP_CONFIG.startPos.x && y === MAP_CONFIG.startPos.y) {
                            cell.classList.add('start');
                            cell.innerHTML = '<span class="cell-label">S</span>';
                        } else if (x === MAP_CONFIG.goalPos.x && y === MAP_CONFIG.goalPos.y) {
                            cell.classList.add('goal', 'bolivia-target');
                            cell.innerHTML = '<span class="cell-label">üáßüá¥</span>';
                        } else {
                            // Verificar si es pa√≠s
                            const country = MAP_CONFIG.countries.find(c => c.x === x && c.y === y);
                            if (country) {
                                cell.classList.add('country');
                                cell.style.backgroundColor = country.color;
                                cell.innerHTML = `<span class="cell-label">${country.code}</span>`;
                                cell.title = country.name;
                            }
                            // Verificar si es oc√©ano
                            else if (MAP_CONFIG.oceans.some(o => o.x === x && o.y === y)) {
                                cell.classList.add('ocean');
                                cell.innerHTML = '<span class="cell-label">üåä</span>';
                            }
                            // Verificar si es monta√±a
                            else if (MAP_CONFIG.mountains.some(m => m.x === x && m.y === y)) {
                                cell.classList.add('mountain');
                                cell.innerHTML = '<span class="cell-label">‚õ∞Ô∏è</span>';
                            }
                            // Camino libre
                            else {
                                cell.classList.add('path');
                            }
                        }
                        
                        mapGrid.appendChild(cell);
                    }
                }
                
                updateAgentPosition();
            }
            
            // Actualizar posici√≥n del agente con animaci√≥n suave
            function updateAgentPosition(animate = false) {
                // Calcular posici√≥n en p√≠xeles basada en la celda del grid
                const x = agent.x * MAP_CONFIG.cellSize + (MAP_CONFIG.cellSize / 4);
                const y = agent.y * MAP_CONFIG.cellSize + (MAP_CONFIG.cellSize / 4);
                
                if (animate) {
                    navigatingPiece.style.transition = 'all 0.5s ease-in-out';
                } else {
                    navigatingPiece.style.transition = 'none';
                }
                
                // Aplicar posici√≥n y rotaci√≥n
                navigatingPiece.style.left = `${x}px`;
                navigatingPiece.style.top = `${y}px`;
                navigatingPiece.style.transform = `rotate(${agent.direction * 90}deg)`;
                
                // Actualizar displays
                positionDisplay.textContent = `(${agent.x},${agent.y})`;
                directionDisplay.textContent = ['Norte', 'Este', 'Sur', 'Oeste'][agent.direction];
                
                // Verificar si lleg√≥ al objetivo
                if (agent.x === MAP_CONFIG.goalPos.x && agent.y === MAP_CONFIG.goalPos.y && !agent.isAtGoal) {
                    agent.isAtGoal = true;
                    showSuccessMessage();
                }
            }
            
            // Verificar si una posici√≥n es v√°lida
            function isValidPosition(x, y) {
                if (x < 0 || x >= MAP_CONFIG.width || y < 0 || y >= MAP_CONFIG.height) {
                    return false;
                }
                
                // Verificar oc√©anos (obst√°culos)
                if (MAP_CONFIG.oceans.some(o => o.x === x && o.y === y)) {
                    return false;
                }
                
                // Verificar monta√±as (obst√°culos)
                if (MAP_CONFIG.mountains.some(m => m.x === x && m.y === y)) {
                    return false;
                }
                
                // Verificar pa√≠ses (obst√°culos, no se puede pasar por encima)
                if (MAP_CONFIG.countries.some(c => c.x === x && c.y === y)) {
                    return false;
                }
                
                return true;
            }
            
            // Comandos disponibles
            const commands = {
                avanzar: function() {
                    const directions = [
                        {x: 0, y: -1}, // Norte
                        {x: 1, y: 0},  // Este
                        {x: 0, y: 1},  // Sur
                        {x: -1, y: 0}  // Oeste
                    ];
                    
                    const dir = directions[agent.direction];
                    const newX = agent.x + dir.x;
                    const newY = agent.y + dir.y;
                    
                    if (isValidPosition(newX, newY) || (newX === MAP_CONFIG.goalPos.x && newY === MAP_CONFIG.goalPos.y)) {
                        agent.x = newX;
                        agent.y = newY;
                        updateAgentPosition(true);
                        console.log(`‚úÖ Avanzar: (${agent.x}, ${agent.y})`);
                        return true;
                    } else {
                        console.log(`‚ùå No se puede avanzar a (${newX}, ${newY}) - posici√≥n bloqueada`);
                        return false;
                    }
                },
                
                girar_derecha: function() {
                    agent.direction = (agent.direction + 1) % 4;
                    updateAgentPosition(true);
                    console.log(`üîÑ Girar derecha: ${['Norte', 'Este', 'Sur', 'Oeste'][agent.direction]}`);
                    return true;
                },
                
                girar_izquierda: function() {
                    agent.direction = (agent.direction + 3) % 4;
                    updateAgentPosition(true);
                    console.log(`üîÑ Girar izquierda: ${['Norte', 'Este', 'Sur', 'Oeste'][agent.direction]}`);
                    return true;
                },
                
                verificar_frente: function() {
                    const directions = [
                        {x: 0, y: -1}, // Norte
                        {x: 1, y: 0},  // Este
                        {x: 0, y: 1},  // Sur
                        {x: -1, y: 0}  // Oeste
                    ];
                    
                    const dir = directions[agent.direction];
                    const frontX = agent.x + dir.x;
                    const frontY = agent.y + dir.y;
                    
                    const canMove = isValidPosition(frontX, frontY) || (frontX === MAP_CONFIG.goalPos.x && frontY === MAP_CONFIG.goalPos.y);
                    console.log(`üëÅÔ∏è Verificar frente: (${frontX}, ${frontY}) - ${canMove ? 'Libre' : 'Bloqueado'}`);
                    return canMove;
                }
            };
            
            // Ejecutar un comando
            function executeCommand(commandName) {
                console.log(`üéØ Ejecutando comando: ${commandName}`);
                
                if (commands[commandName]) {
                    const success = commands[commandName]();
                    
                    // Verificar si lleg√≥ al objetivo
                    if (agent.x === MAP_CONFIG.goalPos.x && agent.y === MAP_CONFIG.goalPos.y) {
                        executionStatusDisplay.textContent = '¬°Bolivia encontr√≥ su lugar!';
                        execution.isRunning = false;
                        if (execution.intervalId) {
                            clearTimeout(execution.intervalId);
                            execution.intervalId = null;
                        }
                    }
                    
                    return success;
                } else {
                    console.error(`‚ùå Comando desconocido: ${commandName}`);
                    return false;
                }
            }
            
            // Mostrar mensaje de √©xito
            function showSuccessMessage() {
                console.log('üéâ ¬°√âxito! Bolivia lleg√≥ al objetivo');
                const messageDiv = document.createElement('div');
                messageDiv.className = 'success-message';
                messageDiv.innerHTML = `
                    <div class="message-content">
                        <h3>¬°Felicitaciones!</h3>
                        <p>üáßüá¥ Bolivia ha encontrado su lugar en el mapa</p>
                        <p>El puzzle de Sudam√©rica est√° completo</p>
                        <button onclick="window.puzzleControls.resetSimulation()" class="reset-button">Nuevo Desaf√≠o</button>
                    </div>
                `;
                document.body.appendChild(messageDiv);
                
                setTimeout(() => {
                    messageDiv.classList.add('show');
                }, 100);
            }
            
            // Resetear simulaci√≥n
            function resetSimulation() {
                console.log('üîÑ Reseteando simulaci√≥n...');
                
                // Limpiar interval si existe
                if (execution.intervalId) {
                    clearTimeout(execution.intervalId);
                    execution.intervalId = null;
                }
                
                agent.x = MAP_CONFIG.startPos.x;
                agent.y = MAP_CONFIG.startPos.y;
                agent.direction = 0;
                agent.isAtGoal = false;
                
                execution.currentIndex = 0;
                execution.isRunning = false;
                execution.isPaused = false;
                
                // Remover mensaje de √©xito si existe
                const successMessage = document.querySelector('.success-message');
                if (successMessage) {
                    successMessage.remove();
                }
                
                updateAgentPosition();
                updateExecutionDisplay();
                executionStatusDisplay.textContent = 'Listo';
            }
            
            // Actualizar display de ejecuci√≥n
            function updateExecutionDisplay() {
                const currentCommand = execution.currentIndex < execution.commands.length ? 
                    execution.commands[execution.currentIndex] : 'Ninguna';
                
                currentInstructionDisplay.textContent = currentCommand;
                executionStepDisplay.textContent = `${execution.currentIndex}/${execution.commands.length}`;
            }
            
            // Ejecutar secuencia de comandos
            function runExecution() {
                if (!execution.isRunning || execution.isPaused) {
                    return;
                }
                
                if (execution.currentIndex < execution.commands.length) {
                    const command = execution.commands[execution.currentIndex];
                    executeCommand(command);
                    execution.currentIndex++;
                    updateExecutionDisplay();
                    
                    // Programar siguiente comando
                    if (execution.isRunning && !execution.isPaused) {
                        execution.intervalId = setTimeout(runExecution, execution.speed);
                    }
                } else {
                    execution.isRunning = false;
                    executionStatusDisplay.textContent = 'Terminado';
                    console.log('‚úÖ Ejecuci√≥n completada');
                }
            }
            
            // API p√∫blica para comunicarse con el CodeEditor
            window.puzzleControls = {
                resetSimulation: resetSimulation,
                
                setCommands: function(commandList) {
                    console.log('üì• Recibiendo comandos:', commandList);
                    execution.commands = [...commandList]; // Hacer copia del array
                    execution.currentIndex = 0;
                    updateExecutionDisplay();
                    console.log('‚úÖ Comandos configurados exitosamente');
                },
                
                addCommand: function(command) {
                    execution.commands.push(command);
                    updateExecutionDisplay();
                },
                
                clearCommands: function() {
                    execution.commands = [];
                    execution.currentIndex = 0;
                    updateExecutionDisplay();
                },
                
                executeStep: function() {
                    if (execution.currentIndex < execution.commands.length) {
                        const command = execution.commands[execution.currentIndex];
                        executeCommand(command);
                        execution.currentIndex++;
                        updateExecutionDisplay();
                    }
                },
                
                startExecution: function() {
                    console.log('üöÄ Iniciando ejecuci√≥n desde API');
                    if (!execution.isRunning && execution.commands.length > 0) {
                        execution.isRunning = true;
                        execution.isPaused = false;
                        executionStatusDisplay.textContent = 'Ejecutando...';
                        console.log('‚ñ∂Ô∏è Iniciando ejecuci√≥n autom√°tica');
                        runExecution();
                    }
                },
                
                getAgentStatus: function() {
                    return {
                        position: {x: agent.x, y: agent.y},
                        direction: agent.direction,
                        isAtGoal: agent.isAtGoal
                    };
                },
                
                isReady: function() {
                    return true;
                }
            };
            
            // Inicializar
            initializeMap();
            updateExecutionDisplay();
            
            console.log('‚úÖ PuzzleViewer inicializado correctamente');
            console.log('üîó puzzleControls expuesto globalmente');
        });
    </script>
|]